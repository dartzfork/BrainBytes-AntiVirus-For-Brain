name: Auto Tag, Release, and Upload EXE

on:
  push:
    branches:
      - main

jobs:
  tag-release-build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Get next tag
      id: tag
      run: |
        # Get latest tag, default to v0.0.0 if none exist
        $latest_tag = git describe --tags --abbrev=0 2>$null
        if (-not $latest_tag) { $latest_tag = "v0.0.0" }
        # Extract major, minor, patch
        if ($latest_tag -match '^v(\d+)\.(\d+)\.(\d+)$') {
          $major = [int]$matches[1]
          $minor = [int]$matches[2]
          $patch = [int]$matches[3] + 1
        } else {
          $major = 0
          $minor = 0
          $patch = 1
        }
        $new_tag = "v$major.$minor.$patch"
        Write-Output "new_tag=$new_tag" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create new tag
      run: |
        git tag ${{ steps.tag.outputs.new_tag }}
        git push origin ${{ steps.tag.outputs.new_tag }}

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.new_tag }}
        release_name: Release ${{ steps.tag.outputs.new_tag }}
        body: |
          Automated release for ${{ steps.tag.outputs.new_tag }}
        draft: false
        prerelease: false

    - name: Compile main.c to BrainBytes.exe
      run: gcc main.c -o BrainBytes.exe

    - name: Upload EXE to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./BrainBytes.exe
        asset_name: BrainBytes.exe
        asset_content_type: application/vnd.microsoft.portable-executable
